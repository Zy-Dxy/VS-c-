#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>
//int main(){
//	int a = 10;
//	int arr[] = { 1,2,3,4,5,6 };//元素的类型是int，数组的类型是int[6]
//	printf("%d\n", sizeof(a));//4
//	printf("%d\n", sizeof(int));//4
//	printf("%d\n", sizeof a);//4
//	//printf("%d\n", sizeof int);要加括号
//	printf("%d\n", sizeof(arr));//一个int类型占4个
//	printf("%d\n", sizeof(arr) / sizeof(arr[0]));
//	return 0;
//}


int main() {

	int a = 2;//int占用4个字节，32个bit
	int b = ~a;// ~:按位（二进制位）取反：1→0，0→1。
	
	//00000000000000000000000000000000;补码，01
	//11111111111111111111111111111111;反码+1=补码 
//原码，反码，补码：
//负数在内存中存储的时候，存储的是二进制的补码。
	//11111111111111111111111111111111;补码
	//11111111111111111111111111111110;反码
	//10000000000000000000000000000001;原码
	printf("%d\n", b);//-1，打印的使用的是这个数的原码。//10000000000000000000000000000001;原码:开头是0则正，1则负。
	//原→反，符号位不变，其他位按位取反，反码加1得到补码
	return 0;
}


////加减操作符
//int main() {
//
//	int a = 10;
//	//int b = a++;//后置++，先赋值，a再加1；a =11,b=10
//	//int b = ++a;//前置++，先赋值，再加1；a=11,b=11
//	//int b = a--;//后置--，先赋值，在减1；a=9,b=10
//	int b = --a;//前置--，先减1，再赋值；a=9,b=9
//	printf("a=%d b=%d\n", a, b);
//	return 0;
//}


//int main() {
//	//int a = 3.14;//类型转换可能会丢失数据
//	int a = (int)3.14;// (类型)强制类型转换
//
//	return 0;
//}


//逻辑操作符
//int main() {
//	//// 0 表示假，非0就是真； &&逻辑与
//	//int a = 0;//a=1时，c=1
//	//int b = 5;
//	//int c = a && b;//a,b都是真c才为真
//	
//	int a = 1;
//	int b = 0;
//	int c = a || b;// ||逻辑或，一真为真，都为假才为假，一假也为真
//	printf("%d", c);//0
//	return 0;
//}


//条件操作符;三目操作符
//int main() {
//
//	int a = 10;
//	int b = 90;
//	//   exp?exp1:exp2； (如果前面的表达式为真，则输出exp1，否则输出exp2)
//	int max = 0;
//	max = (a > b ? a : b);//=  if(a>b)    max=a;   else  max=b
//	printf("%d", max);
//	return 0;
//}


int ADD(int a, int b) {
//	int z = 0;
//	z = a + b;
//	return z;
//}
//int main() {
//	int arr[10] = { 0 };
//	arr[4];//  []为下标引用操作符，从0开始第五个元素
//	int a = 10;
//	int b = 20;
//	int sum = add(a, b);//  ()为函数的调用
//
//	return 0;
//
//}


//int main() {
////	//register int a = 10;//  建议把a放进寄存器里;//局部变量,自动变量，自动销毁，自动使用auto
////	int a = -10;
////	a = 2;
////	//int 定义的变量是有符号的
////	//unsigned int num = -19;//  没有符号之分，输出为19
////	//struct--结构体关键字
////	//union--联合体，共用体，自己定义的变量名不可冲突
//	//typedef - 类型定义 - 类型重定义
//	/*	typedef unsigned int u_int;
//		typedef int num = 20;
//		u_int num2 = 20;*/
//	
//	return 0;
//}
//void test() {
//	//int a = 1;局部变量执行一个循环之后消失，重新再定义
//	static int a = 1;//静态的局部变量，不会因为代码块的结束而消失，而是保存下来不销毁。生命周期随main函数结束而结束
//	//static  修饰局部变量，局部变量的生命周变长   
// 修饰全局变量，改变可变量的作用域不可再外部声明，只能在静态的，自己所在的原文件中使用，
// static改变了函数的作用域-不准确，改变了函数的链接属性。
//	a++;
//	printf("a = %d\n",a);
//}
//int main() {
//	int i = 0;
//	while (i < 5) {
//		test();
//		i++;
//	}
//
//	return 0;
//}


//int main() {
//
//	//extern - 声明外部符号的全局变量
//	extern int g_val;
//	printf("%d\n", g_val);
//	return 0;
//}


//声明外部函数
//extern int Add(int, int);//
//int main() {
//
//	int a = 10;
//	int b = 20;
//	int sum = Add(a, b);
//	printf("sum = %d\n",sum);
//	return 0;
//}
